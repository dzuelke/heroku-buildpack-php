#!/usr/bin/env bash

# bin/compile <build-dir> <cache-dir> <env-dir>

# fail hard
set -o pipefail
# fail harder
set -eu
# move hidden files too, just in case
shopt -s dotglob

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=${3:-}
BP_DIR=`cd $(dirname $0); cd ..; pwd`

S3_URL="https://lang-php.s3.amazonaws.com/dist-develop"

# convenience functions
source $BP_DIR/bin/common.sh

if [ -n "$ENV_DIR" ]; then
    export_env_dir "$ENV_DIR" "" '^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LD_LIBRARY_PATH)$'
fi

cd $BUILD_DIR

if [ -s composer.json ]; then
    json_empty=0
    json_invalid=0
    cat composer.json | python -mjson.tool &> /dev/null || json_invalid=$?
    if [[ "$json_invalid" != "0" ]]; then
        error "Could not parse composer.json; make sure it's valid!"
    fi
else
    json_empty=1
    warning 'Your composer.json is completely empty, please consider putting at least "{}" in there to make it valid JSON.'
fi

mkdir -p .heroku/php

export COMPOSER_CMD='composer'
export COMPOSER_CACHE_DIR=$CACHE_DIR/php/composer
mkdir -p $COMPOSER_CACHE_DIR

PHP_VERSIONS="5.5.11"
if [ -f composer.json ]; then
    if [ ! -f composer.lock ]; then
        has_packages=$(cat composer.json | python -c 'import sys, json; print any(key.count("/") for key in json.load(sys.stdin)["require"])' 2> /dev/null || true) # might fail, set -e would stop execution
        if [ "$has_packages" == "True" ]; then
            error "Your composer.json specifies dependencies, but no composer.lock was found, please check it into your repository along with composer.json!"
        fi
    fi
    
    require_self=$(cat composer.json | python -c 'import sys, json; print json.load(sys.stdin)["require"]["heroku/heroku-buildpack-php"]' 2> /dev/null || true)
    if [ -n "$require_self" ]; then
        error "Your composer.json specifies 'heroku/heroku-buildpack-php' as a requirement; this package may only be used as a dev dependency!"
    fi
    
    # FIXME: this would be, of course, very basic and doesn't support expressions; migrate to semver.org
    phpver=$(cat composer.json | python -c 'import sys, json; print json.load(sys.stdin)["require"]["php"]' 2> /dev/null || true)
    if [ ! -z $phpver ]; then
        if [[ $PHP_VERSIONS =~ $phpver ]]; then
            status "Detected request for PHP $phpver in composer.json."
            PHP_VERSION=$phpver
        else
            # TODO: fail harder?
            warning "Unknown PHP version in composer.json, will use default, install may fail!"
        fi
    fi
fi
# use first from PHP_VERSIONS as default
PHP_VERSIONS_ARR=($PHP_VERSIONS)
PHP_VERSION=${PHP_VERSION:-${PHP_VERSIONS_ARR[0]}}

status "Setting up runtime environment..."

PHP_DIST_URL="$S3_URL/php-$PHP_VERSION.tar.gz"
echo "- PHP $PHP_VERSION" | indent
curl --silent --location "$PHP_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
# we need to run PHP in here, set it up!
ln -s $BUILD_DIR/.heroku $HOME/.heroku
export PATH=$HOME/.heroku/php/bin:$PATH
PHP_EXT_DIR=`php-config --extension-dir`
# update config files
mkdir -p $BUILD_DIR/.heroku/php/etc/php
cp $BP_DIR/conf/php/php.ini $BUILD_DIR/.heroku/php/etc/php
cp $BP_DIR/conf/php/php-fpm.conf $BUILD_DIR/.heroku/php/etc/php
mkdir -p $BUILD_DIR/.heroku/php/etc/php/conf.d
# enable opcache
cp "$BP_DIR/conf/php/conf.d/ext-opcache.ini" $BUILD_DIR/.heroku/php/etc/php/conf.d

APACHE_VERSION="2.4.9"
APACHE_DIST_URL="$S3_URL/apache-$APACHE_VERSION.tar.gz"
echo "- Apache $APACHE_VERSION" | indent
curl --silent --location "$APACHE_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
# Apache; copy in our config
cp $BP_DIR/conf/apache2/httpd.conf.default $BUILD_DIR/.heroku/php/etc/apache2/httpd.conf

NGINX_VERSION="1.4.6"
NGINX_DIST_URL="$S3_URL/nginx-$NGINX_VERSION.tar.gz"
echo "- Nginx $NGINX_VERSION" | indent
curl --silent --location "$NGINX_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
# nginx; copy in our config
cp $BP_DIR/conf/nginx/nginx.conf.default $BUILD_DIR/.heroku/php/etc/nginx/nginx.conf

# handle extensions
if [ -f composer.json ]; then
    exts=$(cat composer.json | python -c 'from __future__ import print_function; import sys, json; { print(key[4:]) for key in json.load(sys.stdin)["require"] if key.startswith("ext-")}' 2> /dev/null || true)
    if [ ! -z "$exts" ]; then
        status "Activating PHP extensions listed in composer.json:"
        while read -r ext; do
            ext_ini="$BP_DIR/conf/php/conf.d/ext-$ext.ini"
            if [ -f $ext_ini ]; then
                cp $ext_ini $BUILD_DIR/.heroku/php/etc/php/conf.d
                echo "- $ext (using dedicated ext-$ext.ini)" | indent
            elif [ -f "$PHP_EXT_DIR/$ext.so" ]; then
                echo "extension = $ext.so" > $BUILD_DIR/.heroku/php/etc/php/conf.d/ext-$ext.ini
                echo "- $ext" | indent
            else
                warning "Unknown extension $ext in composer.json, install may fail!"
            fi
        done <<< "$exts"
    fi
fi

if [ -f composer.lock ]; then
    status "Installing dependencies..."
    
    # check if we should use a composer.phar version bundled with the project
    if [ -f composer.phar ]; then
        COMPOSER_CMD="php composer.phar"
        warning "Found a composer.phar in app root, will use it for install."
        echo "Make sure this version of composer is up to date!" | indent
    else
        $COMPOSER_CMD self-update --no-interaction --quiet # TODO: specify a version once composer has stable releases
    fi

    # install dependencies
    $COMPOSER_CMD --version | indent
    $COMPOSER_CMD install --no-dev --prefer-dist --optimize-autoloader --no-interaction | indent
fi

status "Building runtime environment..."
# install this buildpack as a composer package
# it will contain the apache/nginx/php configs and the boot script
# this will only install this one package, and leave everything else intact
# we use our version of composer for this to make sure it works
# TODO: make sure the project composer.json doesn't require this package
# TODO: install same tree-ish as this buildpack instance (read it from BUILDPACK_URL)
BUILDPACK_URL=${BUILDPACK_URL:-}
this_git_tree_ish=$(expr "$BUILDPACK_URL" : '^.*/heroku-buildpack-php#\(..*\)$' || true)
this_git_tree_ish=${this_git_tree_ish:-master}
# FIXME: should be dev-master#$this_git_tree_ish unless the tree-ish is a branch name
# require without updates (quietly to not confuse people), then update with --no-dev, as currently, require defaults to dev since the recent install-with-dev change
if [[ "$json_empty" == "1" ]]; then
    echo "{}" > composer.json
fi
composer require --update-no-dev --prefer-dist --no-interaction "heroku/heroku-buildpack-php dev-$this_git_tree_ish" | indent
composer dump-autoload --optimize --no-interaction | indent

# Update the PATH
mkdir -p $BUILD_DIR/.profile.d
# look for composer.json, not composer.lock - maybe someone has a post-install-cmd, but no requires
cat > $BUILD_DIR/.profile.d/php.sh <<EOF
export PATH="\$HOME/.heroku/php/bin:\$HOME/.heroku/php/sbin:\$PATH"
if [ -f composer.json ]; then
    $COMPOSER_CMD run-script post-install-cmd --no-dev --no-interaction --quiet
fi
EOF
